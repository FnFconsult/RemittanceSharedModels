// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RemittanceSharedModels;

#nullable disable

namespace RemittanceSharedModels.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RemittanceSharedModels.AlertNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("MessageListContactIds")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AlertNotifications");
                });

            modelBuilder.Entity("RemittanceSharedModels.AmlockOfflineTransactionsServiceRun", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTimeOffset?>("LastRunDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<long>("RecordsCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AmlockOfflineTransactionsServiceRuns");
                });

            modelBuilder.Entity("RemittanceSharedModels.AppSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("RemittanceSharedModels.ArchivedPaymentOrderReversalRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ApprovedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<double>("ReversalCharge")
                        .HasColumnType("double precision");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TransactionRequestReference")
                        .HasColumnType("text");

                    b.Property<string>("VettedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("VettedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VettingNotes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ArchivedPaymentOrderReversalRequests");
                });

            modelBuilder.Entity("RemittanceSharedModels.ArchivedTransactionLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DataAfter")
                        .HasColumnType("text");

                    b.Property<string>("DataBefore")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.Property<string>("TransactionRequestReference")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ArchivedTransactionLogs");
                });

            modelBuilder.Entity("RemittanceSharedModels.ArchivedTransactionRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("BalanceAfter")
                        .HasColumnType("double precision");

                    b.Property<double>("BalanceBefore")
                        .HasColumnType("double precision");

                    b.Property<string>("BankAccountNo")
                        .HasColumnType("text");

                    b.Property<string>("BankName")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryAddress")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryAnswer")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryCity")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryCountry")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryEmail")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryFirstName")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryFullName")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryId")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryIdNumber")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryIdType")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryLastName")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryMiddleName")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryQuestion")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiarySex")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryTaxId")
                        .HasColumnType("text");

                    b.Property<string>("CallBackUrl")
                        .HasColumnType("text");

                    b.Property<double>("CommissionAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("CommissionCurrency")
                        .HasColumnType("text");

                    b.Property<string>("CountryFrom")
                        .HasColumnType("text");

                    b.Property<string>("CountryTo")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CustomerCountry")
                        .HasColumnType("text");

                    b.Property<string>("CustomerCountryOfBirth")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CustomerDateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("text");

                    b.Property<string>("CustomerFirstName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerFullName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CustomerIdExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerIdIssueCountry")
                        .HasColumnType("text");

                    b.Property<string>("CustomerIdIssuedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CustomerIdIssuedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerIdNumber")
                        .HasColumnType("text");

                    b.Property<string>("CustomerIdType")
                        .HasColumnType("text");

                    b.Property<string>("CustomerLastName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerMiddleName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerNationality")
                        .HasColumnType("text");

                    b.Property<string>("CustomerOccupation")
                        .HasColumnType("text");

                    b.Property<string>("CustomerPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("CustomerSex")
                        .HasColumnType("text");

                    b.Property<string>("CustomerSourceOfFunds")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("ElevyAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("ElevyCancelledResponseTimestamp")
                        .HasColumnType("text");

                    b.Property<string>("ElevyClientTransactionId")
                        .HasColumnType("text");

                    b.Property<string>("ElevyConfirmedResponseTimestamp")
                        .HasColumnType("text");

                    b.Property<string>("ElevyId")
                        .HasColumnType("text");

                    b.Property<string>("ElevyReserveTimestamp")
                        .HasColumnType("text");

                    b.Property<string>("ElevyReserverResponseTimestamp")
                        .HasColumnType("text");

                    b.Property<string>("ElevyStatus")
                        .HasColumnType("text");

                    b.Property<double>("ElevyTaxableAmount")
                        .HasColumnType("double precision");

                    b.Property<bool>("FinalStatusReported")
                        .HasColumnType("boolean");

                    b.Property<string>("FullData")
                        .HasColumnType("text");

                    b.Property<string>("MobileWalletAccountNumber")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long>("MoneyTransferOperatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<double>("OriginalAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("OriginalCurrency")
                        .HasColumnType("text");

                    b.Property<string>("PIN")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("PaymentCurrency")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("PaymentEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentFailedReason")
                        .HasColumnType("text");

                    b.Property<string>("PaymentFailedRecommendations")
                        .HasColumnType("text");

                    b.Property<bool>("PaymentFailureReported")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentInstructions")
                        .HasColumnType("text");

                    b.Property<string>("PaymentPartner")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("PaymentStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<bool>("RejectionReported")
                        .HasColumnType("boolean");

                    b.Property<string>("RoutingCode")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ScreeningEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ScreeningStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("text");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<int>("TsqRetries")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MoneyTransferOperatorId");

                    b.HasIndex("TransactionId", "MoneyTransferOperatorId");

                    b.ToTable("ArchivedTransactionRequests");
                });

            modelBuilder.Entity("RemittanceSharedModels.ArchivedTransactionStatusUpdateRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long>("MtoId")
                        .HasColumnType("bigint");

                    b.Property<int>("NewTransactionStatus")
                        .HasColumnType("integer");

                    b.Property<int>("OldTransactionStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TransactionRequestReference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VettedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("VettedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VettingNotes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ArchivedTransactionStatusUpdateRequests");
                });

            modelBuilder.Entity("RemittanceSharedModels.Bank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Notes")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("RoutingCode")
                        .HasColumnType("text");

                    b.Property<string>("SortCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("RemittanceSharedModels.BankBranch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BankId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Notes")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankBranches");
                });

            modelBuilder.Entity("RemittanceSharedModels.ComplianceByPassTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ScreeningEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ScreeningStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("TransactionRequestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TransactionRequestId");

                    b.ToTable("ComplianceByPassTransactions");
                });

            modelBuilder.Entity("RemittanceSharedModels.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alpha2Code")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Alpha3Code")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Notes")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("NumericCode")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("RemittanceSharedModels.CrossSwitchRecon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FoundInCrossSwitch")
                        .HasColumnType("text");

                    b.Property<string>("FoundInFalcon")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("NotFoundInCrossSwitch")
                        .HasColumnType("text");

                    b.Property<string>("NotFoundInFalcon")
                        .HasColumnType("text");

                    b.Property<string>("NotPaidInFalcon")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfTransactionsInCrossSwitch")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfTransactionsInFalcon")
                        .HasColumnType("integer");

                    b.Property<string>("NumberPaidInFalcon")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("TotalPaidInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalPaidInMtn")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfFoundInCrossSwitch")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfFoundInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNotFoundInCrossSwitch")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNotFoundInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNotPaidInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNumberPaidInFalcon")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("CrossSwitchRecons");
                });

            modelBuilder.Entity("RemittanceSharedModels.CrossSwitchReconItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("boolean");

                    b.Property<long>("CrossSwitchReconId")
                        .HasColumnType("bigint");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Passed")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CrossSwitchReconId");

                    b.ToTable("CrossSwitchReconItems");
                });

            modelBuilder.Entity("RemittanceSharedModels.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Notes")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("RemittanceSharedModels.ElevyTrustAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .HasColumnType("text");

                    b.Property<string>("ElevyResponseObject")
                        .HasColumnType("text");

                    b.Property<bool>("Identified")
                        .HasColumnType("boolean");

                    b.Property<string>("IssuerId")
                        .HasColumnType("text");

                    b.Property<string>("PaymentChannel")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Tin")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ElevyTrustAccounts");
                });

            modelBuilder.Entity("RemittanceSharedModels.Forex", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long>("MoneyTransferOperatorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MoneyTransferOperatorId");

                    b.ToTable("Forex");
                });

            modelBuilder.Entity("RemittanceSharedModels.ForexCurrencyRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long>("ForexId")
                        .HasColumnType("bigint");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ForexId");

                    b.ToTable("ForexCurrencyRates");
                });

            modelBuilder.Entity("RemittanceSharedModels.ForexLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ForexId")
                        .HasColumnType("bigint");

                    b.Property<long>("MoneyTransferOperatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("PublishedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("Pushed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ForexId");

                    b.HasIndex("MoneyTransferOperatorId");

                    b.ToTable("ForexLogs");
                });

            modelBuilder.Entity("RemittanceSharedModels.FundTransferRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("BeneficiaryFirstName")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryLastName")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryPhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.Property<string>("RoutingCode")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("VettedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("VettedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VettingNotes")
                        .HasColumnType("text");

                    b.Property<int>("VettingStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FundTransferRequests");
                });

            modelBuilder.Entity("RemittanceSharedModels.GhipssRecon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FoundInFalcon")
                        .HasColumnType("text");

                    b.Property<string>("FoundInGhipss")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("NotFoundInFalcon")
                        .HasColumnType("text");

                    b.Property<string>("NotFoundInGhipss")
                        .HasColumnType("text");

                    b.Property<string>("NotPaidInFalcon")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfTransactionsInFalcon")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfTransactionsInGhipss")
                        .HasColumnType("integer");

                    b.Property<string>("NumberPaidInFalcon")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("TotalPaidInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalPaidInGhipss")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfFoundInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfFoundInGhipss")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNotFoundInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNotFoundInGhipss")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNotPaidInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNumberPaidInFalcon")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("GhipssRecons");
                });

            modelBuilder.Entity("RemittanceSharedModels.GhipssReconItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BusinessDate")
                        .HasColumnType("text");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("DateCreated")
                        .HasColumnType("text");

                    b.Property<string>("DestinationAccountNumber")
                        .HasColumnType("text");

                    b.Property<long>("GhipssReconId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Passed")
                        .HasColumnType("boolean");

                    b.Property<string>("Receiver")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<string>("SourceAccountNumber")
                        .HasColumnType("text");

                    b.Property<double>("TransactionAmount")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("GhipssReconId");

                    b.ToTable("GhipssReconItems");
                });

            modelBuilder.Entity("RemittanceSharedModels.MTOPaymentChannel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Channel")
                        .HasColumnType("text");

                    b.Property<long>("MtoId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MtoId");

                    b.ToTable("MTOPaymentChannels");
                });

            modelBuilder.Entity("RemittanceSharedModels.MTOPaymentChannelRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Channel")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long>("MtoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("TransactionType")
                        .HasColumnType("text");

                    b.Property<string>("VettedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("VettedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VettingNotes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MtoId");

                    b.ToTable("MTOPaymentChannelRequests");
                });

            modelBuilder.Entity("RemittanceSharedModels.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BulkId")
                        .HasColumnType("text");

                    b.Property<string>("MessageId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Response")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTimeOffset?>("SentTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("RemittanceSharedModels.MessageListContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Actions")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MessageListContacts");
                });

            modelBuilder.Entity("RemittanceSharedModels.MessageTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MessageTemplates");
                });

            modelBuilder.Entity("RemittanceSharedModels.MoneyTransferOperator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Abbrev")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("AuthPin")
                        .HasColumnType("text");

                    b.Property<string>("AuthToken")
                        .HasColumnType("text");

                    b.Property<double>("Balance")
                        .HasColumnType("double precision");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<double>("Limit")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<double>("Threshold")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("MoneyTransferOperators");
                });

            modelBuilder.Entity("RemittanceSharedModels.MoneyTransferOperatorAccountBalanceAdjustment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<double?>("Balance")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long>("MoneyTransferOperatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Narrative")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("VettedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("VettedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VettingNotes")
                        .HasColumnType("text");

                    b.Property<int>("VettingStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MoneyTransferOperatorId");

                    b.ToTable("MoneyTransferOperatorAccountAdjustments");
                });

            modelBuilder.Entity("RemittanceSharedModels.MoneyTransferOperatorAccountLimitAdjustment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long>("MoneyTransferOperatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Narrative")
                        .HasColumnType("text");

                    b.Property<double>("NewLimit")
                        .HasColumnType("double precision");

                    b.Property<string>("VettedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("VettedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VettingNotes")
                        .HasColumnType("text");

                    b.Property<int>("VettingStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MoneyTransferOperatorId");

                    b.ToTable("MoneyTransferOperatorAccountLimitAdjustments");
                });

            modelBuilder.Entity("RemittanceSharedModels.MoneyTransferOperatorAccountThresholdAdjustment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long>("MoneyTransferOperatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Narrative")
                        .HasColumnType("text");

                    b.Property<double>("NewThreshold")
                        .HasColumnType("double precision");

                    b.Property<string>("VettedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("VettedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VettingNotes")
                        .HasColumnType("text");

                    b.Property<int>("VettingStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MoneyTransferOperatorId");

                    b.ToTable("MoneyTransferOperatorAccountThresholdAdjustments");
                });

            modelBuilder.Entity("RemittanceSharedModels.MtnRecon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FoundInFalcon")
                        .HasColumnType("text");

                    b.Property<string>("FoundInMtn")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("NotFoundInFalcon")
                        .HasColumnType("text");

                    b.Property<string>("NotFoundInMtn")
                        .HasColumnType("text");

                    b.Property<string>("NotPaidInFalcon")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfTransactionsInFalcon")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfTransactionsInMtn")
                        .HasColumnType("integer");

                    b.Property<string>("NumberPaidInFalcon")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("TotalPaidInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalPaidInMtn")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfFoundInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfFoundInMtn")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNotFoundInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNotFoundInMtn")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNotPaidInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNumberPaidInFalcon")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("MtnRecons");
                });

            modelBuilder.Entity("RemittanceSharedModels.MtnReconItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<long>("MtnReconId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Passed")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MtnReconId");

                    b.ToTable("MtnReconItems");
                });

            modelBuilder.Entity("RemittanceSharedModels.MtoUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long>("MoneyTransferOperatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("MoneyTransferOperatorId");

                    b.ToTable("MtoUsers");
                });

            modelBuilder.Entity("RemittanceSharedModels.PaymentFailureReason", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Notes")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("PaymentFailureReasons");
                });

            modelBuilder.Entity("RemittanceSharedModels.PaymentFailureRecommendation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Notes")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("PaymentFailureRecommendations");
                });

            modelBuilder.Entity("RemittanceSharedModels.PaymentOrderReversalRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ApprovedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<double>("ReversalCharge")
                        .HasColumnType("double precision");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<long>("TransactionRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("VettedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("VettedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VettingNotes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TransactionRequestId");

                    b.ToTable("PaymentOrderReversalRequests");
                });

            modelBuilder.Entity("RemittanceSharedModels.PaymentPartnerBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentPartner")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentPartnerBalance");
                });

            modelBuilder.Entity("RemittanceSharedModels.PaymentRequestPayload", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentRequestPayloads");
                });

            modelBuilder.Entity("RemittanceSharedModels.PendingTransactionRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("BalanceAfter")
                        .HasColumnType("double precision");

                    b.Property<double>("BalanceBefore")
                        .HasColumnType("double precision");

                    b.Property<string>("BankAccountNo")
                        .HasColumnType("text");

                    b.Property<string>("BankName")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryAddress")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryAnswer")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryCity")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryCountry")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryEmail")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryFirstName")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryFullName")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryId")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryIdNumber")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryIdType")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryLastName")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryMiddleName")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryQuestion")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiarySex")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryTaxId")
                        .HasColumnType("text");

                    b.Property<string>("CallBackUrl")
                        .HasColumnType("text");

                    b.Property<double>("CommissionAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("CommissionCurrency")
                        .HasColumnType("text");

                    b.Property<string>("CountryFrom")
                        .HasColumnType("text");

                    b.Property<string>("CountryTo")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CustomerCountry")
                        .HasColumnType("text");

                    b.Property<string>("CustomerCountryOfBirth")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CustomerDateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("text");

                    b.Property<string>("CustomerFirstName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerFullName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CustomerIdExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerIdIssueCountry")
                        .HasColumnType("text");

                    b.Property<string>("CustomerIdIssuedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CustomerIdIssuedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerIdNumber")
                        .HasColumnType("text");

                    b.Property<string>("CustomerIdType")
                        .HasColumnType("text");

                    b.Property<string>("CustomerLastName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerMiddleName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerNationality")
                        .HasColumnType("text");

                    b.Property<string>("CustomerOccupation")
                        .HasColumnType("text");

                    b.Property<string>("CustomerPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("CustomerSex")
                        .HasColumnType("text");

                    b.Property<string>("CustomerSourceOfFunds")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("ElevyAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("ElevyCancelledResponseTimestamp")
                        .HasColumnType("text");

                    b.Property<string>("ElevyClientTransactionId")
                        .HasColumnType("text");

                    b.Property<string>("ElevyConfirmedResponseTimestamp")
                        .HasColumnType("text");

                    b.Property<string>("ElevyId")
                        .HasColumnType("text");

                    b.Property<string>("ElevyReserveTimestamp")
                        .HasColumnType("text");

                    b.Property<string>("ElevyReserverResponseTimestamp")
                        .HasColumnType("text");

                    b.Property<string>("ElevyStatus")
                        .HasColumnType("text");

                    b.Property<double>("ElevyTaxableAmount")
                        .HasColumnType("double precision");

                    b.Property<bool>("FinalStatusReported")
                        .HasColumnType("boolean");

                    b.Property<string>("FullData")
                        .HasColumnType("text");

                    b.Property<string>("MobileWalletAccountNumber")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long>("MoneyTransferOperatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<double>("OriginalAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("OriginalCurrency")
                        .HasColumnType("text");

                    b.Property<string>("PIN")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("PaymentCurrency")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("PaymentEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentFailedReason")
                        .HasColumnType("text");

                    b.Property<string>("PaymentFailedRecommendations")
                        .HasColumnType("text");

                    b.Property<bool>("PaymentFailureReported")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentInstructions")
                        .HasColumnType("text");

                    b.Property<string>("PaymentPartner")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("PaymentStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<bool>("RejectionReported")
                        .HasColumnType("boolean");

                    b.Property<string>("RoutingCode")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ScreeningEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ScreeningStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("text");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<int>("TsqRetries")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("MoneyTransferOperatorId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("TransactionId", "MoneyTransferOperatorId")
                        .IsUnique();

                    b.ToTable("PendingTransactionRequests");
                });

            modelBuilder.Entity("RemittanceSharedModels.ReceivedRequestPayload", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<string>("System")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ReceivedRequestPayloads");
                });

            modelBuilder.Entity("RemittanceSharedModels.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("RemittanceSharedModels.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("RemittanceSharedModels.SystemLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SystemLogs");
                });

            modelBuilder.Entity("RemittanceSharedModels.TigoRecon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FoundInFalcon")
                        .HasColumnType("text");

                    b.Property<string>("FoundInTigo")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("NotFoundInFalcon")
                        .HasColumnType("text");

                    b.Property<string>("NotFoundInTigo")
                        .HasColumnType("text");

                    b.Property<string>("NotPaidInFalcon")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfTransactionsInFalcon")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfTransactionsInTigo")
                        .HasColumnType("integer");

                    b.Property<string>("NumberPaidInFalcon")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("TotalPaidInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalPaidInMtn")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfFoundInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfFoundInTigo")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNotFoundInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNotFoundInTigo")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNotPaidInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNumberPaidInFalcon")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("TigoRecons");
                });

            modelBuilder.Entity("RemittanceSharedModels.TigoReconItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Passed")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<long>("TigoReconId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TigoReconId");

                    b.ToTable("TigoReconItems");
                });

            modelBuilder.Entity("RemittanceSharedModels.TransactionLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DataAfter")
                        .HasColumnType("text");

                    b.Property<string>("DataBefore")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.Property<long?>("TransactionRequestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TransactionLogs");
                });

            modelBuilder.Entity("RemittanceSharedModels.TransactionRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("BalanceAfter")
                        .HasColumnType("double precision");

                    b.Property<double>("BalanceBefore")
                        .HasColumnType("double precision");

                    b.Property<string>("BankAccountNo")
                        .HasColumnType("text");

                    b.Property<string>("BankName")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryAddress")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryAnswer")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryCity")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryCountry")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryEmail")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryFirstName")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryFullName")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryId")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryIdNumber")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryIdType")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryLastName")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryMiddleName")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryQuestion")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiarySex")
                        .HasColumnType("text");

                    b.Property<string>("BeneficiaryTaxId")
                        .HasColumnType("text");

                    b.Property<string>("CallBackUrl")
                        .HasColumnType("text");

                    b.Property<double>("CommissionAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("CommissionCurrency")
                        .HasColumnType("text");

                    b.Property<string>("CountryFrom")
                        .HasColumnType("text");

                    b.Property<string>("CountryTo")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("CustomerCountry")
                        .HasColumnType("text");

                    b.Property<string>("CustomerCountryOfBirth")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CustomerDateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("text");

                    b.Property<string>("CustomerFirstName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerFullName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CustomerIdExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerIdIssueCountry")
                        .HasColumnType("text");

                    b.Property<string>("CustomerIdIssuedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CustomerIdIssuedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerIdNumber")
                        .HasColumnType("text");

                    b.Property<string>("CustomerIdType")
                        .HasColumnType("text");

                    b.Property<string>("CustomerLastName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerMiddleName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerNationality")
                        .HasColumnType("text");

                    b.Property<string>("CustomerOccupation")
                        .HasColumnType("text");

                    b.Property<string>("CustomerPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("CustomerSex")
                        .HasColumnType("text");

                    b.Property<string>("CustomerSourceOfFunds")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("ElevyAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("ElevyCancelledResponseTimestamp")
                        .HasColumnType("text");

                    b.Property<string>("ElevyClientTransactionId")
                        .HasColumnType("text");

                    b.Property<string>("ElevyConfirmedResponseTimestamp")
                        .HasColumnType("text");

                    b.Property<string>("ElevyId")
                        .HasColumnType("text");

                    b.Property<string>("ElevyReserveTimestamp")
                        .HasColumnType("text");

                    b.Property<string>("ElevyReserverResponseTimestamp")
                        .HasColumnType("text");

                    b.Property<string>("ElevyStatus")
                        .HasColumnType("text");

                    b.Property<double>("ElevyTaxableAmount")
                        .HasColumnType("double precision");

                    b.Property<bool>("FinalStatusReported")
                        .HasColumnType("boolean");

                    b.Property<string>("FullData")
                        .HasColumnType("text");

                    b.Property<string>("MobileWalletAccountNumber")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long>("MoneyTransferOperatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<double>("OriginalAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("OriginalCurrency")
                        .HasColumnType("text");

                    b.Property<string>("PIN")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("PaymentCurrency")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("PaymentEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentFailedReason")
                        .HasColumnType("text");

                    b.Property<string>("PaymentFailedRecommendations")
                        .HasColumnType("text");

                    b.Property<bool>("PaymentFailureReported")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentInstructions")
                        .HasColumnType("text");

                    b.Property<string>("PaymentPartner")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("PaymentStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<bool>("RejectionReported")
                        .HasColumnType("boolean");

                    b.Property<string>("RoutingCode")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ScreeningEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ScreeningStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("text");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<int>("TsqRetries")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("MoneyTransferOperatorId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("TransactionId", "MoneyTransferOperatorId")
                        .IsUnique();

                    b.ToTable("TransactionRequests");
                });

            modelBuilder.Entity("RemittanceSharedModels.TransactionRequestPayload", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MtoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TransactionRequestPayloads");
                });

            modelBuilder.Entity("RemittanceSharedModels.TransactionStatusUpdateRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<long>("MtoId")
                        .HasColumnType("bigint");

                    b.Property<int>("NewTransactionStatus")
                        .HasColumnType("integer");

                    b.Property<int>("OldTransactionStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VettedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("VettedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VettingNotes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TransactionStatusUpdateRequests");
                });

            modelBuilder.Entity("RemittanceSharedModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RemittanceSharedModels.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("RemittanceSharedModels.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("RemittanceSharedModels.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("RemittanceSharedModels.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RemittanceSharedModels.VodafoneRecon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FoundInFalcon")
                        .HasColumnType("text");

                    b.Property<string>("FoundInVodafone")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("NotFoundInFalcon")
                        .HasColumnType("text");

                    b.Property<string>("NotFoundInVodafone")
                        .HasColumnType("text");

                    b.Property<string>("NotPaidInFalcon")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfTransactionsInFalcon")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfTransactionsInVodafone")
                        .HasColumnType("integer");

                    b.Property<string>("NumberPaidInFalcon")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("TotalPaidInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalPaidInMtn")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfFoundInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfFoundInVodafone")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNotFoundInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNotFoundInVodafone")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNotPaidInFalcon")
                        .HasColumnType("double precision");

                    b.Property<double>("ValueOfNumberPaidInFalcon")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("VodafoneRecons");
                });

            modelBuilder.Entity("RemittanceSharedModels.VodafoneReconItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Passed")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.Property<long>("VodafoneReconId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VodafoneReconId");

                    b.ToTable("VodafoneReconItems");
                });

            modelBuilder.Entity("RemittanceSharedModels.ArchivedTransactionRequest", b =>
                {
                    b.HasOne("RemittanceSharedModels.MoneyTransferOperator", "MoneyTransferOperator")
                        .WithMany()
                        .HasForeignKey("MoneyTransferOperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoneyTransferOperator");
                });

            modelBuilder.Entity("RemittanceSharedModels.BankBranch", b =>
                {
                    b.HasOne("RemittanceSharedModels.Bank", "Bank")
                        .WithMany("Branches")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("RemittanceSharedModels.ComplianceByPassTransaction", b =>
                {
                    b.HasOne("RemittanceSharedModels.PendingTransactionRequest", "TransactionRequest")
                        .WithMany()
                        .HasForeignKey("TransactionRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionRequest");
                });

            modelBuilder.Entity("RemittanceSharedModels.CrossSwitchReconItem", b =>
                {
                    b.HasOne("RemittanceSharedModels.CrossSwitchRecon", "CrossSwitchRecon")
                        .WithMany("Items")
                        .HasForeignKey("CrossSwitchReconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CrossSwitchRecon");
                });

            modelBuilder.Entity("RemittanceSharedModels.Forex", b =>
                {
                    b.HasOne("RemittanceSharedModels.MoneyTransferOperator", "MoneyTransferOperator")
                        .WithMany()
                        .HasForeignKey("MoneyTransferOperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoneyTransferOperator");
                });

            modelBuilder.Entity("RemittanceSharedModels.ForexCurrencyRate", b =>
                {
                    b.HasOne("RemittanceSharedModels.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemittanceSharedModels.Forex", "Forex")
                        .WithMany("CurrencyRates")
                        .HasForeignKey("ForexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Forex");
                });

            modelBuilder.Entity("RemittanceSharedModels.ForexLog", b =>
                {
                    b.HasOne("RemittanceSharedModels.Forex", "Forex")
                        .WithMany("Logs")
                        .HasForeignKey("ForexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemittanceSharedModels.MoneyTransferOperator", "MoneyTransferOperator")
                        .WithMany()
                        .HasForeignKey("MoneyTransferOperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Forex");

                    b.Navigation("MoneyTransferOperator");
                });

            modelBuilder.Entity("RemittanceSharedModels.GhipssReconItem", b =>
                {
                    b.HasOne("RemittanceSharedModels.GhipssRecon", "GhipssRecon")
                        .WithMany("Items")
                        .HasForeignKey("GhipssReconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GhipssRecon");
                });

            modelBuilder.Entity("RemittanceSharedModels.MTOPaymentChannel", b =>
                {
                    b.HasOne("RemittanceSharedModels.MoneyTransferOperator", "Mto")
                        .WithMany()
                        .HasForeignKey("MtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mto");
                });

            modelBuilder.Entity("RemittanceSharedModels.MTOPaymentChannelRequest", b =>
                {
                    b.HasOne("RemittanceSharedModels.MoneyTransferOperator", "Mto")
                        .WithMany()
                        .HasForeignKey("MtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mto");
                });

            modelBuilder.Entity("RemittanceSharedModels.MoneyTransferOperator", b =>
                {
                    b.HasOne("RemittanceSharedModels.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("RemittanceSharedModels.MoneyTransferOperatorAccountBalanceAdjustment", b =>
                {
                    b.HasOne("RemittanceSharedModels.MoneyTransferOperator", "MoneyTransferOperator")
                        .WithMany()
                        .HasForeignKey("MoneyTransferOperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoneyTransferOperator");
                });

            modelBuilder.Entity("RemittanceSharedModels.MoneyTransferOperatorAccountLimitAdjustment", b =>
                {
                    b.HasOne("RemittanceSharedModels.MoneyTransferOperator", "MoneyTransferOperator")
                        .WithMany()
                        .HasForeignKey("MoneyTransferOperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoneyTransferOperator");
                });

            modelBuilder.Entity("RemittanceSharedModels.MoneyTransferOperatorAccountThresholdAdjustment", b =>
                {
                    b.HasOne("RemittanceSharedModels.MoneyTransferOperator", "MoneyTransferOperator")
                        .WithMany()
                        .HasForeignKey("MoneyTransferOperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoneyTransferOperator");
                });

            modelBuilder.Entity("RemittanceSharedModels.MtnReconItem", b =>
                {
                    b.HasOne("RemittanceSharedModels.MtnRecon", "MtnRecon")
                        .WithMany("Items")
                        .HasForeignKey("MtnReconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MtnRecon");
                });

            modelBuilder.Entity("RemittanceSharedModels.MtoUser", b =>
                {
                    b.HasOne("RemittanceSharedModels.MoneyTransferOperator", "MoneyTransferOperator")
                        .WithMany()
                        .HasForeignKey("MoneyTransferOperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoneyTransferOperator");
                });

            modelBuilder.Entity("RemittanceSharedModels.PaymentOrderReversalRequest", b =>
                {
                    b.HasOne("RemittanceSharedModels.TransactionRequest", "TransactionRequest")
                        .WithMany()
                        .HasForeignKey("TransactionRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionRequest");
                });

            modelBuilder.Entity("RemittanceSharedModels.PendingTransactionRequest", b =>
                {
                    b.HasOne("RemittanceSharedModels.MoneyTransferOperator", "MoneyTransferOperator")
                        .WithMany()
                        .HasForeignKey("MoneyTransferOperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoneyTransferOperator");
                });

            modelBuilder.Entity("RemittanceSharedModels.RoleClaim", b =>
                {
                    b.HasOne("RemittanceSharedModels.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RemittanceSharedModels.TigoReconItem", b =>
                {
                    b.HasOne("RemittanceSharedModels.TigoRecon", "TigoRecon")
                        .WithMany("Items")
                        .HasForeignKey("TigoReconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TigoRecon");
                });

            modelBuilder.Entity("RemittanceSharedModels.TransactionRequest", b =>
                {
                    b.HasOne("RemittanceSharedModels.MoneyTransferOperator", "MoneyTransferOperator")
                        .WithMany()
                        .HasForeignKey("MoneyTransferOperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoneyTransferOperator");
                });

            modelBuilder.Entity("RemittanceSharedModels.UserClaim", b =>
                {
                    b.HasOne("RemittanceSharedModels.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RemittanceSharedModels.UserLogin", b =>
                {
                    b.HasOne("RemittanceSharedModels.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RemittanceSharedModels.UserRole", b =>
                {
                    b.HasOne("RemittanceSharedModels.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemittanceSharedModels.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RemittanceSharedModels.UserToken", b =>
                {
                    b.HasOne("RemittanceSharedModels.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RemittanceSharedModels.VodafoneReconItem", b =>
                {
                    b.HasOne("RemittanceSharedModels.VodafoneRecon", "VodafoneRecon")
                        .WithMany("Items")
                        .HasForeignKey("VodafoneReconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VodafoneRecon");
                });

            modelBuilder.Entity("RemittanceSharedModels.Bank", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("RemittanceSharedModels.CrossSwitchRecon", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RemittanceSharedModels.Forex", b =>
                {
                    b.Navigation("CurrencyRates");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("RemittanceSharedModels.GhipssRecon", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RemittanceSharedModels.MtnRecon", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RemittanceSharedModels.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("RemittanceSharedModels.TigoRecon", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RemittanceSharedModels.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("RemittanceSharedModels.VodafoneRecon", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
